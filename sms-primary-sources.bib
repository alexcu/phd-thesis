@article{PSMaalej2013,
abstract = {Reading reference documentation is an important part of programming with application programming interfaces (APIs). Reference documentation complements the API by providing information not obvious from the API syntax. To improve the quality of reference documentation and the efficiency with which the relevant information it contains can be accessed, we must first understand its content. We report on a study of the nature and organization of knowledge contained in the reference documentation of the hundreds of APIs provided as a part of two major technology platforms: Java SDK 6 and.NET 4.0. Our study involved the development of a taxonomy of knowledge types based on grounded methods and independent empirical validation. Seventeen trained coders used the taxonomy to rate a total of 5,574 randomly sampled documentation units to assess the knowledge they contain. Our results provide a comprehensive perspective on the patterns of knowledge in API documentation: observations about the types of knowledge it contains and how this knowledge is distributed throughout the documentation. The taxonomy and patterns of knowledge we present in this paper can be used to help practitioners evaluate the content of their API documentation, better organize their documentation, and limit the amount of low-value content. They also provide a vocabulary that can help structure and facilitate discussions about the content of APIs. {\textcopyright}1976-2012 IEEE.},
author = {Maalej, Walid and Robillard, Martin P},
doi = {10.1109/TSE.2013.12},
issn = {0098-5589},
journal = {IEEE Transactions on Software Engineering},
keywords = {.NET,API documentation,Java,content analysis,data mining,empirical study,grounded method,pattern mining,software documentation},
title = {{Patterns of knowledge in API reference documentation}},
year = {2013}
}
@inproceedings{PSAghajani:2019bo,
abstract = {(Good) Software documentation provides developers and users with a description of what a software system does, how it operates, and how it should be used. For example, technical documentation (e.g., an API reference guide) aids developers during evolution/maintenance activities, while a user manual explains how users are to interact with a system. Despite its intrinsic value, the creation and the maintenance of documentation is often neglected, negatively impacting its quality and usefulness, ultimately leading to a generally unfavourable take on documentation. Previous studies investigating documentation issues have been based on surveying developers, which naturally leads to a somewhat biased view of problems affecting documentation. We present a large scale empirical study, where we mined, analyzed, and categorized 878 documentation-related artifacts stemming from four different sources, namely mailing lists, Stack Overflow discussions, issue repositories, and pull requests. The result is a detailed taxonomy of documentation issues from which we infer a series of actionable proposals both for researchers and practitioners.},
address = {Montreal, QC, Canada},
author = {Aghajani, Emad and Nagy, Csaba and Vega-Marquez, Olga Lucero and Linares-Vasquez, Mario and Moreno, Laura and Bavota, Gabriele and Lanza, Michele},
booktitle = {Proceedings of the 41st International Conference on Software Engineering},
doi = {10.1109/ICSE.2019.00122},
isbn = {978-1-72-810869-8},
issn = {0270-5257},
keywords = {Documentation,Empirical Study},
month = {may},
pages = {1199--1210},
publisher = {IEEE},
title = {{Software Documentation Issues Unveiled}},
year = {2019}
}
@inproceedings{PSKo:2011fb,
abstract = {While many studies have investigated the challenges that developers face in finding and using API documentation, few have considered the role of developers' conceptual knowledge in these tasks. We designed a study in which developers were asked to explore the feasibility of two requirements concerning networking protocols and application platforms that most participants were unfamiliar with, observing the effect that a lack of conceptual knowledge had on their use of documentation. Our results show that without conceptual knowledge, developers struggled to formulate effective queries and to evaluate the relevance or meaning of content they found. Our results suggest that API documentation should not only include detailed examples of API use, but also thorough introductions to the concepts, standards, and ideas manifested in an API's data structures and functionality. {\textcopyright}2011 IEEE.},
address = {Pittsburg, PA, USA},
author = {Ko, Andrew J and Riche, Yann},
booktitle = {Proceedings of the 2011 IEEE Symposium on Visual Languages and Human Centric Computing},
doi = {10.1109/VLHCC.2011.6070395},
isbn = {978-1-45-771245-6},
keywords = {API usability,documentation,feasibility},
month = {sep},
pages = {173--176},
publisher = {IEEE},
title = {{The role of conceptual knowledge in API usability}},
year = {2011}
}
@article{PSRobillard:2011uv,
abstract = {Large APIs can be hard to learn, and this can lead to decreased programmer productivity. But what makes APIs hard to learn? We conducted a mixed approach, multi-phased study of the obstacles faced by Microsoft developers learning a wide variety of new APIs. The study involved a combination of surveys and in-person interviews, and collected the opinions and experiences of over 440 professional developers. We found that some of the most severe obstacles faced by developers learning new APIs pertained to the documentation and other learning resources. We report on the obstacles developers face when learning new APIs, with a special focus on obstacles related to API documentation. Our qualitative analysis elicited five important factors to consider when designing API documentation: documentation of intent; code examples; matching APIs with scenarios; penetrability of the API; and format and presentation. We analyzed how these factors can be interpreted to prioritize API documentation development efforts {\textcopyright}2010 Springer Science+Business Media, LLC.},
author = {Robillard, Martin P and Deline, Robert},
doi = {10.1007/s10664-010-9150-8},
issn = {1382-3256},
journal = {Empirical Software Engineering},
keywords = {Application programming interfaces,Documentation,Programming,Software libraries},
number = {6},
pages = {703--732},
title = {{A field study of API learning obstacles}},
volume = {16},
year = {2011}
}
@inproceedings{PSWatson:2012uy,
abstract = {Computer technology has made amazing advances in the past few decades; however, the software documentation of today still looks strikingly similar to the software documentation used 30 years ago. If this continues into the 21st century, more and more soft-ware developers could be using 20 th-century-style documentation to solve 21 st-century problems with 21 st-century technologies. Is 20 th-century- style documentation up to the challenge? How can that be measured? This paper seeks to answer those questions by developing a heuristic to identify whether the documentation set for an application programming interface (API) contains the key elements of API reference documentation that help software developers learn an API. The resulting heuristic was tested on a collection of software documentation that was chosen to provide a diverse set of examples with which to validate the heuristic. In the course of testing the heuristic, interesting patterns in the API documentation were observed. For example, twenty-five percent of the documentation sets studied did not have any overview information, which, according to studies, is one of the most basic elements an API documentation set needs to help software developers learn to use the API. The heuristic produced by this research can be used to evaluate large sets of API documentation, track trends in API documentation, and facilitate additional research. Copyright {\textcopyright}2012 ACM.},
address = {Seattle, WA, USA},
author = {Watson, Robert},
booktitle = {Proceedings of the 30th ACM International Conference on Design of Communication},
doi = {10.1145/2379057.2379112},
isbn = {978-1-45-031497-8},
keywords = {API,API reference documentation,Application programming interface,Software documentation,Software libraries},
month = {oct},
pages = {295--302},
publisher = {ACM},
title = {{Development and application of a heuristic to assess trends in API documentation}},
year = {2012}
}
@article{PSRobillard:2009uk,
abstract = {Most software projects reuse components exposed through APIs, which provide developers access to implemented functionality. APIs have grown large and diverse, which raises questions regarding their usability. This article reports on a study of the obstacles professional developers at Microsoft faced when learning how to use APIs. The study was grounded in developers' experience, collected through a survey and interviews. The resulting data showed that learning resources for APIs are critically important and shed light on three issues: the need to discover the design and rationale of the API when needed, the challenge of finding credible usage API examples at the right level of complexity, and the challenge of understanding inexplicable API behavior. The article describes each of these challenges in detail and discusses associated implications for API users and designers. {\textcopyright}2009 IEEE.},
author = {Robillard, Martin P},
doi = {10.1109/MS.2009.193},
issn = {0740-7459},
journal = {IEEE Software},
keywords = {API design,API usability,Application interfaces,Code examples,Context,Data mining,Documentation,Empirical study,Software documentation,Usability},
number = {6},
pages = {27--34},
title = {{What makes APIs hard to learn? Answers from developers}},
volume = {26},
year = {2009}
}
@inproceedings{PSNykaza:2002td,
abstract = {This paper steps the reader through a needs assessment of programmers that was conducted by instructional designers. The assessment's purpose was to identify what learning support programmers need and want to successfully use a new software development kit (SDK). The paper includes the challenges the researchers encountered, the questions asked and the responses, the types of individuals interviewed, and the conclusions reached from the research. Recommendations also are presented. Those responsible with developing documentation, training, and other learning support systems for programmers may find this assessment helpful. Marketing, product development and customer support people may also find value in learning more about the needs of this unique audience.},
address = {Toronto, ON, Canada},
author = {Nykaza, Janet and Messinger, Rhonda and Boehme, Fran and Norman, Cherie L and Mace, Matthew and Gordon, Manuel},
booktitle = {Proceedings of the 20th Annual International Conference on Computer Documentation},
doi = {10.1145/584955.584976},
keywords = {API documentation,Developer documentation,Needs analysis,Needs assessment,Programmer documentation,SDK documentation},
month = {oct},
pages = {133--141},
publisher = {ACM},
title = {{What programmers really want: Results of a needs assessment for SDK documentation}},
year = {2002}
}
@inproceedings{PSHaselbock:2018jd,
abstract = {Design space analysis is a method for identifying and organizing potential design options and related concepts. So far, we have used decision models for the design space analysis of various areas of microservice design. Based on the feedback we have received, we refine our approach for design space analysis and extend it to support decision documentation. To validate the refined design space analysis approach and the approach we developed for decision documentation, we conduct a case study of microservice API management together with an industry partner. We present the identified design spaces and decision models created during the design space analysis, and show how the decision models were used for decision documentation. In addition, we draw general conclusions from applying the presented approach and concepts in an industrial context.},
address = {Paris, France},
author = {Haselbock, Stefan and Weinreich, Rainer and Buchgeher, Georg and Kriechbaum, Thomas},
booktitle = {Proceedings of the 11th International Conference on Service-Oriented Computing and Applications, SOCA 2018},
doi = {10.1109/SOCA.2018.00008},
keywords = {Decision models,Design decision documentation,Design space analysis,Microservices API management},
month = {nov},
pages = {1--8},
title = {{Microservice Design Space Analysis and Decision Documentation: A Case Study on API Management}},
year = {2019}
}
@article{PSGeiger:2018fv,
abstract = {Computational research and data analytics increasingly relies on complex ecosystems of open source software (OSS) “libraries” – curated collections of reusable code that programmers import to perform a specific task. Software documentation for these libraries is crucial in helping programmers/analysts know what libraries are available and how to use them. Yet documentation for open source software libraries is widely considered low-quality. This article is a collaboration between CSCW researchers and contributors to data analytics OSS libraries, based on ethnographic fieldwork and qualitative interviews. We examine several issues around the formats, practices, and challenges around documentation in these largely volunteer-based projects. There are many different kinds and formats of documentation that exist around such libraries, which play a variety of educational, promotional, and organizational roles. The work behind documentation is similarly multifaceted, including writing, reviewing, maintaining, and organizing documentation. Different aspects of documentation work require contributors to have different sets of skills and overcome various social and technical barriers. Finally, most of our interviewees do not report high levels of intrinsic enjoyment for doing documentation work (compared to writing code). Their motivation is affected by personal and project-specific factors, such as the perceived level of credit for doing documentation work versus more ‘technical' tasks like adding new features or fixing bugs. In studying documentation work for data analytics OSS libraries, we gain a new window into the changing practices of data-intensive research, as well as help practitioners better understand how to support this often invisible and infrastructural work in their projects.},
author = {Geiger, R. Stuart and Varoquaux, Nelle and Mazel-Cabasse, Charlotte and Holdgraf, Chris},
doi = {10.1007/s10606-018-9333-1},
issn = {15737551},
journal = {Computer Supported Cooperative Work: CSCW: An International Journal},
keywords = {Collaboration,Documentation,Ethnography,Infrastructure,Invisible work,Motivations,Open source,Peer production,Standards},
month = {may},
number = {3-6},
pages = {767--802},
title = {{The Types, Roles, and Practices of Documentation in Data Analytics Open Source Software Libraries: A Collaborative Ethnography of Documentation Work}},
volume = {27},
year = {2018}
}
@inproceedings{PSHead:2018baa,
abstract = {Without usable and accurate documentation of how to use an API, developers can find themselves deterred from reusing relevant code. In C++, one place developers can find documentation is in a header file. When information is missing, they may look at the corresponding implementation code. To understand what's missing from C++ API documentation and the factors influencing whether it will be fixed, we conducted a mixed-methods study involving two experience sampling surveys with hundreds of developers at the moment they visited implementation code, interviews with 18 of those developers, and interviews with 8 API maintainers. In many cases, updating documentation may provide only limited value for developers, while requiring effort maintainers don't want to invest. We identify a set of questions maintainers and tool developers should consider when improving API-level documentation.},
address = {Gothenburg, Sweden},
author = {Head, Andrew and Sadowski, Caitlin and Murphy-Hill, Emerson and Knight, Andrea},
booktitle = {Proceedings of the 40th International Conference on Software Engineering},
doi = {10.1145/3180155.3180176},
issn = {0270-5257},
month = {may},
pages = {643--653},
publisher = {ACM},
series = {questions and tradeoffs with API documentation for C++ projects},
title = {{When not to comment: Questions and tradeoffs with API documentation for C++ projects}},
year = {2018}
}
@inproceedings{PSInzunza:2018dn,
address = {Naples, Italy},
author = {Inzunza, Sergio and Ju{\'{a}}rez-Ram{\'{i}}rez, Reyes and Jim{\'{e}}nez, Samantha},
booktitle = {Proceedings of the 6th World Conference on Information Systems and Technologies},
doi = {10.1007/978-3-319-77712-2_22},
month = {mar},
pages = {229--239},
publisher = {Springer},
title = {{API Documentation}},
year = {2018}
}
@article{PSMeng:2017cx,
abstract = {The success of an application programming interface (API) crucially depends on how well its documentation meets the information needs of software developers. Previous research suggests that these information needs have not been sufficiently understood. This article presents the results of a series of semistructured interviews and a follow-up questionnaire conducted to explore the learning goals and learning strategies of software developers, the information resources they turn to and the quality criteria they apply to API documentation. Our results show that developers initially try to form a global understanding regarding the overall purpose and main features of an API, but then adopt either a concepts-oriented or a code-oriented learning strategy that API documentation both needs to address. Our results also show that general quality criteria such as completeness and clarity are relevant to API documentation as well. Developing and maintaining API documentation therefore need to involve the expertise of communication professionals.},
author = {Meng, Michael and Steinhardt, Stephanie and Schubert, Andreas},
doi = {10.1177/0047281617721853},
issn = {1541-3780},
journal = {Journal of Technical Writing and Communication},
keywords = {Application programming interface documentation,Audience analysis,Information design,Technical documentation,Usability},
month = {aug},
number = {3},
pages = {295--330},
title = {{Application programming interface documentation: What do software developers want?}},
volume = {48},
year = {2018}
}
@article{PSAversano:2017ic,
abstract = {Software documentation is a basic component of the software development process and it is very important in all the phases of a software system life cycle. It is plays a very important role from the point of view of both the software engineer and user. Software documentation usually includes textual documentation required by the Software engineering standards, API documentation, Wiki pages and source code comments. Surveys and studies indicate that the documentation is not always available and, if available, only partially addresses the developers' needs, as it is often wrong, incomplete, out-of-date and ambiguous. In the context of ERP - Enterprise Resource Planning, the relevance of the software documentation is even more important due to the complexity of such a kind of software systems and the strategic role they have within operative organizations. This paper focuses on the quality assessment of the documentation of ERP open source systems with the aim of understanding if they include high quality documentation for adequately support anyone want to adopt them and/or executing maintenance activities. Specifically, a quality model is defined and its application to three Open source software system is performed.},
author = {Aversano, Lerina and Guardabascio, Daniela and Tortorella, Maria},
doi = {10.1016/j.procs.2017.11.057},
issn = {1877-0509},
journal = {Procedia Computer Science},
keywords = {Documentation Quality,Documentation maintenance,ERP Open source software,Software documentation,Software metrics},
month = {jan},
pages = {423--430},
title = {{Analysis of the Documentation of ERP Software Projects}},
volume = {121},
year = {2017}
}
@inproceedings{PSRobillard:hk,
abstract = {We advocate for a paradigm shift in supporting the information needs of developers, centered around the concept of automated on-demand developer documentation. Currently, developer information needs are fulfilled by asking experts or consulting documentation. Unfortunately, traditional documentation practices are inefficient because of, among others, the manual nature of its creation and the gap between the creators and consumers. We discuss the major challenges we face in realizing such a paradigm shift, highlight existing research that can be leveraged to this end, and promote opportunities for increased convergence in research on software documentation.},
address = {Shanghai, China},
author = {Robillard, Martin P. and Marcus, Andrian and Treude, Christoph and Bavota, Gabriele and Chaparro, Oscar and Ernst, Neil and Gerosall, Marco Aur{\'{e}}lio and Godfrey, Michael and Lanza, Michele and Linares-V{\'{a}}squez, Mario and Murphy, Gail C. and Moreno, Laura and Shepherd, David and Wong, Edmund},
booktitle = {Proceedings of the 33rd IEEE International Conference on Software Maintenance and Evolution},
doi = {10.1109/ICSME.2017.17},
month = {sep},
pages = {479--483},
publisher = {IEEE},
title = {{On-demand developer documentation}},
year = {2017}
}
@inproceedings{PSWatson:2013fx,
abstract = {Studies of what software developers need from API documentation have reported consistent findings over the years; however, these studies all used similar methods - usually a form of observation or survey. Our study looks at API documentation as artifacts of the open-source software communities who produce them to study how documentation produced by the communities who use the software compares to past studies of what software developers want and need from API documentation. We reviewed API documentation from 33 of the most popular open-source software projects, assessed their documentation elements, and evaluated the quality of their visual design and writing. We found that the documentation we studied included most or all the documentation elements reported as desirable in earlier studies and in the process, we found that the design and writing quality of many documentation sets received considerable attention. Our findings reinforce the API requirements identified in the literature and suggest that the design and writing quality of the documentation are also critical API documentation requirements that warrant further study. {\textcopyright} 2013 ACM.},
address = {Greenville, SC, USA},
author = {Watson, Robert and {Mark Stamnes}, Mark and Jeannot-Schroeder, Jacob and Spyridakis, Jan H.},
booktitle = {Proceedings of the 31st ACM International Conference on Design of Communication},
doi = {10.1145/2507065.2507076},
keywords = {api,api reference documentation,application programming interface,software documentation,software libraries},
month = {sep},
pages = {165--174},
publisher = {ACM},
title = {{API documentation and software community values: A survey of open-source API documentation}},
year = {2013}
}
@inproceedings{PSJeong:2009tu,
abstract = {All software today is written using libraries, toolkits, frameworks and other application programming interfaces (APIs). We performed a user study of the online documentation a large and complex API for Enterprise Service-Oriented Architecture (eSOA), which identified many issues and recommendations for making API documentation easier to use. eSOA is an appropriate testbed because the target user groups range from high-level business experts who do not have significant programming expertise (and thus are end-participant developers), to professional programmers. Our study showed that the participants' background influenced how they navigated the documentation. Lack of familiarity with business terminology was a barrier we observed for developers without business application experience. Participants with business software experience had difficulty differentiating similarly named services. Both groups avoided areas of the documentation that had an inconsistent visual design. A new design for the documentation that supports flexible navigation strategies seem to be required to support the wide range of users for eSOA. This paper summarizes our study and provides recommendations for future documentation for developers. {\textcopyright} 2009 Springer Berlin Heidelberg.},
address = {Siegen, Germany},
author = {Jeong, Sae Young and Xie, Yingyu and Beaton, Jack and Myers, Brad A. and Stylos, Jeff and Ehret, Ralf and Karstens, Jan and Efeoglu, Arkin and Busse, Daniela K.},
booktitle = {Proceedings of the First International Symposium on End User Development},
doi = {10.1007/978-3-642-00427-8_6},
issn = {0302-9743},
keywords = {API Design,Business Solution Architects,Documentation,Service-Oriented Architecture,Usability,Web Services},
month = {mar},
pages = {86--105},
publisher = {Springer},
title = {{Improving documentation for eSOA APIs through user studies}},
volume = {5435 LNCS},
year = {2009}
}
@inproceedings{PSParnas:2007fb,
abstract = {This experience and research based paper discusses the reasons that software cannot be trusted and then explains how the use of greatly improved documentation can make software more trustworthy. It shows how tabular expressions can be used to prepare software documents that are both precise and easily used by developers, inspectors, and testers. The paper reviews a number of "tried and true" ideas and illustrates some new refinements in the methods that resulted from recent research. It is intended both to tell developers of techniques available to them and to suggest new research areas. {\textcopyright} 2007 IEEE.},
address = {Plano, TX, USA},
author = {Parnas, David L. and Vilkomir, Sergiy A.},
booktitle = {Proceedings of 10th IEEE International Symposium on High Assurance Systems Engineering},
doi = {10.1109/HASE.2007.63},
issn = {1530-2059},
keywords = {Critical software,Documentation,Specifications,Testing},
month = {nov},
pages = {237--244},
publisher = {IEEE},
title = {{Precise documentation of critical software}},
year = {2007}
}
@inproceedings{PSBottomley:2005fs,
abstract = {There are few resources geared to technical writers working on documentation for software developers. This paper presents the results of online surveys and telephone interviews that cover the experience, technical knowledge, and practices of technical writers in this area, with a large percentage of respondents who are Microsoft employees. Respondents value strong writing skills and the ability to learn quickly and continuously, with the amount and type of knowledge needed being specific to the subject area and audience for their work. {\textcopyright} 2005 IEEE.},
address = {Limerick, Ireland},
author = {Bottomley, Christina},
booktitle = {Proceedings of the 2005 IEEE International Professional Communication Conference},
doi = {10.1109/IPCC.2005.1494255},
keywords = {API Documentation,Developer documentation,Documentation,Programmer Writer,SDK Documentation,Technical Writer},
month = {jul},
pages = {802--812},
publisher = {IEEE},
title = {{What part writer? What part programmer? A survey of practices and knowledge used in programmer writing}},
year = {2005}
}
@article{PSTaulavuori:2004el,
abstract = {Product lines embody a strategic reuse of both intellectual effort and existing artefacts, such as software architectures and components. Third-party components are increasingly being used in product line based software engineering, in which case the integration is controlled by the product line architecture. However, the software integrators have difficulties in finding out the capabilities of components, because components are not documented in a standard way. Documentation is often the only way of assessing the applicability, credibility and quality of a third-party component. Our contribution is a standard documentation pattern for software components. The pattern provides guidelines and structure for component documentation and ensures the quality of documentation. The pattern has been validated by applying and analysing it in practice. {\textcopyright} 2004 Elsevier B.V. All rights reserved.},
author = {Taulavuori, Anne and Niemel{\"{a}}, Eila and Kallio, P{\"{a}}ivi},
doi = {10.1016/j.infsof.2003.10.004},
issn = {0950-5849},
journal = {Information and Software Technology},
keywords = {Component documentation,Software product line,Third-party component},
month = {jun},
number = {8},
pages = {535--546},
title = {{Component documentation - A key issue in software product lines}},
volume = {46},
year = {2004}
}
@article{PSKotula:1998wp,
author = {Kotula, Jeffrey},
doi = {10.1109/52.663791},
issn = {0740-7459},
journal = {IEEE Software},
number = {2},
pages = {84--92},
title = {{Using patterns to create component documentation}},
volume = {15},
year = {1998}
}
@article{PSMcLellan:1998vu,
abstract = {Imagine hypothetically, just for a moment, that programmers are humans," writes Steven Pemberton in a July 1997 magazine devoted to human-computer interaction design and development. "Now suppose for a moment, also for the sake of the argument, that their chief method of communicating and interacting with computers was with programming languages. What would we, as HCI people, then do? Run screaming in the other direction...." 1 It is a good question and, unfortunately, an all too common response. It's hard enough for us to ensure that product interfaces, like those for Excel or Word, are easy to use and learn. But programmers are users, too. They need application and system libraries that are just as easy to learn and use as the products they build from these libraries. Listen to this customer: "I think it would be worthwhile if all developers would spend maybe a couple of hours a year seeing how the[ir] product is used by...customers. Just watching them. And while they're watching ...the customer would say, 'I don't like the way this works....'You need to see how they use it." 2 Now ask yourself: why is it easier to visualize the customer who's purchased a financial accounting package from a neighborhood computer outlet, rather than a programmer whose company has just purchased a new Java class library? Wouldn't the developer of this library find it worthwhile to watch programmers work with it?},
author = {McLellan, Samuel G. and Roesler, Alvin W. and Tempest, Joseph T. and Spinuzzi, Clay I.},
doi = {10.1109/52.676963},
issn = {0740-7459},
journal = {IEEE Software},
number = {3},
pages = {78--86},
title = {{Building more usable APIs}},
volume = {15},
year = {1998}
}
